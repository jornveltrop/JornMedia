import type { NextPage } from "next";
import Head from "next/head";
import { GraphQLClient } from "graphql-request";
import Header from "../components/Header/Header";
import homeStyle from "../styles/home.module.css";
import projectenQuery from "./api/projectenQuery";
import headerQuery from "./api/headerQuery";
import Footer from "../components/Footer/Footer";
import footerQuery from "./api/footerQuery";
import ToTop from "../components/ToTop/ToTop";
import Grid from "../components/Grid/Grid";
import Filter from "../components/Filter/Filter";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

interface ProjectenProps {
  projecten: {
    projectPage: any;
    allProjects: any;
    allSkills: any;
  };
  header: {
    links: [{ [key: string]: String }];
    siteLogo: { [key: string]: String | Number };
  };
  footer: {
    copyrightTag: String;
  };
}

const Projecten: NextPage<ProjectenProps> = ({ projecten, header, footer }) => {
  const projectPage = projecten.projectPage;
  const allProjects = projecten.allProjects;
  const allSkills = projecten.allSkills;
  const router = useRouter();
  let queries = router.query;
  // console.log(queries)

  return (
    <>
      <Head>
        <title>JornMedia</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header headerData={header} />
      <main className={homeStyle.home}>
        <div className={`boxed`}>
          <h2>{projectPage.title}</h2>
        </div>
        <div className="fullWidth center">
          {/* <Filter skills={allSkills}/> */}
          <Grid gridItems={allProjects} />
        </div>
      </main>
      <Footer footerData={footer} />
      <ToTop />
    </>
  );
};

export async function getStaticProps() {
  const endpoint = "https://graphql.datocms.com/";
  const graphQLClient = new GraphQLClient(endpoint, {
    headers: {
      "content-type": "application/json",
      authorization: "Bearer " + process.env.DATOCMS_API_KEY,
    },
  });
  const projectenData = await graphQLClient.request(projectenQuery);
  const headerData = await graphQLClient.request(headerQuery);
  const footerData = await graphQLClient.request(footerQuery);
  const data = {
    projecten: projectenData,
    header: headerData.header,
    footer: footerData.footer,
  };

  return {
    props: data,
  };
}

export default Projecten;
