import { GraphQLClient } from "graphql-request";
import HeaderSection from "../components/HeaderSection/HeaderSection";
import footerQuery from "./api/footerQuery";
import headerQuery from "./api/headerQuery";
import getProjectQuery from "./api/projectQuery";
import projectenQuery from "./api/projectenQuery";
import { NextPage } from "next";
import Footer from "../components/Footer/Footer";
import ToTop from "../components/ToTop/ToTop";
import Head from "next/head";
import Header from "../components/Header/Header";

interface ProjectProps {
  project: any;
  header: {
    links: [{ [key: string]: String }];
    siteLogo: { [key: string]: String | Number };
  };
  footer: {
    copyrightTag: String;
  };
}

const Project: NextPage<ProjectProps> = ({ project, header, footer }) => {
  console.log(project);
  return (
    <>
      <Head>
        <title>JornMedia</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header headerData={header} />
      <main>
        <HeaderSection
          headerImage={project.headerImage}
          title={project.title}
          client={project.client}
          clientImage={project.clientImage}
          skill={project.skill}
        ></HeaderSection>
      </main>
      <Footer footerData={footer} />
      <ToTop />
    </>
  );
};

export async function getStaticProps(context: any) {
  const endpoint = "https://graphql.datocms.com/";
  const graphQLClient = new GraphQLClient(endpoint, {
    headers: {
      "content-type": "application/json",
      authorization: "Bearer " + process.env.DATOCMS_API_KEY,
    },
  });

  const project = context.params.project;
  const projectQuery: any = getProjectQuery(project);
  const projectData = await graphQLClient.request(projectQuery);
  const headerData = await graphQLClient.request(headerQuery);
  const footerData = await graphQLClient.request(footerQuery);
  const data = {
    project: projectData.project,
    header: headerData.header,
    footer: footerData.footer,
  };

  return {
    props: data,
  };
}

export async function getStaticPaths() {
  const endpoint = "https://graphql.datocms.com/";
  const graphQLClient = new GraphQLClient(endpoint, {
    headers: {
      "content-type": "application/json",
      authorization: "Bearer " + process.env.DATOCMS_API_KEY,
    },
  });
  const projectenData = await graphQLClient.request(projectenQuery);

  let projects = projectenData.allProjects;

  const paths = projects.map((project: any) => {
    return {
      params: { project: project.slug },
    };
  });

  return { paths, fallback: false };
}

export default Project;
